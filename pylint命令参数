
Master:
  --rcfile=<file>     指定配置文件
  --init-hook=<code>  执行 python 代码，一般用来设置 sys.path 等参数
  -E, --errors-only   仅展示错误信息
  --py3k              展示 python3 的移植信息
  -v, --verbose       详细信息，会展示一些额外的和检查没关系的内容
  --ignore=<file>[,<file>...]
                      忽略文件/文件夹，默认忽略 csv 文件
  --ignore-patterns=<pattern>[,<pattern>...]
                      忽略符合正则表达式的文件/文件夹
  --persistent=<y_or_n>
                      是否持久化
  --load-plugins=<modules>
                      加载一些插件，比如用 comma 分割 python 模块名字，通常用来增加一些额外的检查
  -j <n-processes>, --jobs=<n-processes>
                      多进程地加速 pylint，默认1
  --limit-inference-results=<number-of-results>
                      限制在推断一个 object 的值时值的数量，对于一些比较复杂的方法会比较有用，默认100
  --extension-pkg-whitelist=<pkg[,pkg]>
                      扩展列表
  --suggestion-mode=<yn>
                      pylint 会去尝试猜一些错误的配置，使用用户友好的提示，而不是直接弹个错误出来，默认 yes
  --exit-zero         总是在退出时返回0，即使确实有一些 lint 错误。对继续执行下面的脚本比较友好

Commands:
  --help-msg=<msg-id>
                      展示 msg-id 的帮助信息
  --list-msgs         展示 pylint 的信息列表
  --list-groups       展示 pylint 的信息分组
  --list-conf-levels  展示 pylint 的信任等级
  --full-documentation
                      展示所有文档
  --generate-rcfile   根据当前的配置生成一份样例配置文件，可以在这个命令前加其他的参数，这样这些参数也会被写入到配置文件中

Messages control:
  --confidence=<levels>
                      设置信任等级
  -e <msg ids>, --enable=<msg ids>
                      激活 msg-id 的信息、报告、类别或检查，可以用','隔开传入一个数组
  -d <msg ids>, --disable=<msg ids>
                      和 enable 相反，可以用 --disable=all，然后 --enable 一些需要的 pylint 检查

Reports:
  -f <format>, --output-format=<format>
                      设置输出格式，可选的有: text, parseable, colorized, json and msvs，也可以自己写 ReportClass，默认 text
  -r <y_or_n>, --reports=<y_or_n>
                      是否展示完整 report，或者仅展示消息
  --evaluation=<python_expression>
                      评估代码质量分数，默认公式是 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)
  -s <y_or_n>, --score=<y_or_n>
                      激活评估分数
  --msg-template=<template>
                      用于展示消息的模板

Basic:
  --good-names=<names>
                      变量名白名单，默认 current: i,j,k,ex,Run,_
  --bad-names=<names>
                      变量名黑名单，默认 foo,bar,baz,toto,tutu,tata
  --name-group=<name1:name2>
                      Colon-delimited sets of names that determine each
                      other's naming style when the name regexes allow
                      several styles. [current: none]
  --include-naming-hint=<y_or_n>
                      命名提示，默认 no
  --property-classes=<decorator names>
                      产生property的装饰器列表，这些装饰器只会检查invalid-name
  --argument-naming-style=<style>
                      参数命名风格，默认 snake_case
  --argument-rgx=<regexp>
                      参数命名风格正则表达式，会覆盖 argument-naming-style
  --attr-naming-style=<style>
                      类方法中的变量命名风格，默认 snake_case
  --attr-rgx=<regexp>
                      类方法中的变量命名风格正则表达式，会覆盖 attr-naming-style
  --class-naming-style=<style>
                      类名命名风格，默认 PascalCase
  --class-rgx=<regexp>
                      类名命名正则表达式，会覆盖 class-naming-style
  --class-attribute-naming-style=<style>
                      类变量命名风格，默认 any
  --class-attribute-rgx=<regexp>
                      类变量命名正则表达式，会覆盖 class-attribute-naming-style
  --const-naming-style=<style>
                      常量命名风格，默认 UPPER_CASE
  --const-rgx=<regexp>
                      常量命名正则表达式，会覆盖 const-naming-style
  --function-naming-style=<style>
                      函数命名风格，默认 snake_case
  --function-rgx=<regexp>
                      函数命名正则表达式，会覆盖 function-naming-style
  --inlinevar-naming-style=<style>
                      单行中用于 iteration 的变量名命名风格，默认 any
  --inlinevar-rgx=<regexp>
                      单行中用于 iteration 的变量名命名正则，会覆盖 inlinevar-naming-style
  --method-naming-style=<style>
                      类方法的命名风格，默认 snake_case
  --method-rgx=<regexp>
                      类方法命名正则表达式，会覆盖 method-naming-style
  --module-naming-style=<style>
                      模块命名风格，默认 snake_case
  --module-rgx=<regexp>
                      模块命名正则表达式，会覆盖 module-naming-style
  --variable-naming-style=<style>
                      局部变量命名风格，默认 snake_case
  --variable-rgx=<regexp>
                      局部变量命名正则表达式，会覆盖 variable-naming-style
  --no-docstring-rgx=<regexp>
                      符合正则表达式的方法或者类不需要 docstring，默认 ^_
  --docstring-min-length=<int>
                      最小 docstring 长度，默认 -1

Classes:
  --defining-attr-methods=<method names>
                      用于声明实例的方法列表，默认 __init__,__new__,setUp
  --valid-classmethod-first-arg=<argument names>
                      类方法第一个参数可用的名字列表，默认 cls
  --valid-metaclass-classmethod-first-arg=<argument names>
                      元类的类方法第一个参数可用的名字列表，默认 cls
  --exclude-protected=<protected access exclusions>
                      访问类的保护成员不会被警告（protected access warning）的名称列表，默认 _asdict,_fields,_replace,_source,_make

Design:
  --max-args=<int>    方法和类方法最多可以有的参数数量，默认 5
  --max-locals=<int>  方法和类方法最多可以有的局部变量数量，默认 15
  --max-returns=<int> 方法和类方法最多可以有的 return 或者 yield 数量，默认 6
  --max-branches=<int>
                      方法和类方法最多可以有的分支数量（if/else），默认 12
  --max-statements=<int>
                      方法和类方法最多可以有的声明数量，默认 50
  --max-parents=<num>
                      最大继承数量，默认 7
  --max-attributes=<num>
                      类最多可以有的变量数量，默认 7
  --min-public-methods=<num>
                      类最少要有的 public 方法数量，默认 2
  --max-public-methods=<num>
                      类最多可以有的 public 方法数量，默认 20
  --max-bool-expr=<num>
                      if 语句中，最多可以有的 bool 操作，默认 5

Exceptions:
  --overgeneral-exceptions=<comma-separated class names>
                      直接 except 这些异常时，会报警，默认 BaseException,Exception

Format:
  --max-line-length=<int>
                      一行最大的字符数量，默认 100
  --ignore-long-lines=<regexp>
                      对于符合正则表达式的行，忽略他的长度限制
  --single-line-if-stmt=<y_or_n>
                      如果 if 没有 else，允许 if 的 body 内容和 if 在同一行，默认 no
  --single-line-class-stmt=<y_or_n>
                      如果类只有一行，允许类和内容放在一行，默认 no
  --no-space-check=trailing-comma,dict-separator,empty-line
                      不需要检查空格的配置，有 trailing-comma,dict-separator,empty-line
                      默认 trailing-comma,dict-separator
                      `dict-separator` is used to
                      allow tabulation in dicts, etc.: {1  : 1,\n222: 2}.
                      `trailing-comma` allows a space between comma and
                      closing bracket: (a, ). 
                      `empty-line` allows space-only lines.
  --max-module-lines=<int>
                      模块最多可以有的行数，默认 1000
  --indent-string=<string>
                      用于当作缩进的单元，默认 '    '
  --indent-after-paren=<int>
                      Number of spaces of indent required inside a hanging
                      or continued line. [current: 4]
  --expected-line-ending-format=<empty or LF or CRLF>
                      换行符，默认 none

Imports:
  --deprecated-modules=<modules>
                      不应该使用的模块名，默认 optparse,tkinter.tix
  --import-graph=<file.dot>
                      Create a graph of every (i.e. internal and external)
                      dependencies in the given file (report RP0402 must not
                      be disabled). [current: none]
  --ext-import-graph=<file.dot>
                      Create a graph of external dependencies in the given
                      file (report RP0402 must not be disabled). [current:
                      none]
  --int-import-graph=<file.dot>
                      Create a graph of internal dependencies in the given
                      file (report RP0402 must not be disabled). [current:
                      none]
  --known-standard-library=<modules>
                      使 pylint 认为指定的模块是标准库的一部分，默认 none
  --known-third-party=<modules>
                      使 pylint 认为指定的模块是第三方库的一部分，默认 enchant
  --analyse-fallback-blocks=<y_or_n>
                      分析 import fallback blocks，可以用来分析 python 2 和 3 的兼容代码，默认 no
  --allow-wildcard-with-all=<y_or_n>
                      允许从定义了 __all__ 的模块中 import 通配符，默认 no
                      from module import *

Logging:
  --logging-modules=<comma separated list>
                      Logging modules to check that the string format
                      arguments are in logging function parameter format.
                      [current: logging]
  --logging-format-style=<old (%) or new ({)>
                      log 的格式，默认 old
                      `old` means using % formatting
                      `new` is for `{}` formatting.

Miscellaneous:
  --notes=<comma separated values>
                      在注释中列出一些 tag，使 pylint 会提示它，默认 FIXME,XXX,TODO

Refactoring:
  --max-nested-blocks=<int>
                      方法和类方法最多可以嵌套的块，默认 5
  --never-returning-functions=NEVER_RETURNING_FUNCTIONS
                      Complete name of functions that never returns. When
                      checking for inconsistent-return-statements if a never
                      returning function is called then it will be
                      considered as an explicit return statement and no
                      message will be printed. [current: sys.exit]

Similarities:
  --min-similarity-lines=<int>
                      n 行以上的代码重复，会被 pylint 认为是有问题的，默认 4
  --ignore-comments=<y or n>
                      Ignore comments when computing similarities. [current:
                      yes]
  --ignore-docstrings=<y or n>
                      Ignore docstrings when computing similarities.
                      [current: yes]
  --ignore-imports=<y or n>
                      Ignore imports when computing similarities. [current:
                      no]

Spelling:
  --spelling-dict=<dict name>
                      Spelling dictionary name. Available dictionaries:
                      none. To make it working install python-enchant
                      package.. [current: none]
  --spelling-ignore-words=<comma separated words>
                      List of comma separated words that should not be
                      checked. [current: none]
  --spelling-private-dict-file=<path to file>
                      A path to a file that contains private dictionary; one
                      word per line. [current: none]
  --spelling-store-unknown-words=<y_or_n>
                      Tells whether to store unknown words to indicated
                      private dictionary in --spelling-private-dict-file
                      option instead of raising a message. [current: no]
  --max-spelling-suggestions=N
                      Limits count of emitted suggestions for spelling
                      mistakes. [current: 4]

String:
  --check-str-concat-over-line-jumps=<y_or_n>
                      This flag controls whether the implicit-str-concat-in-
                      sequence should generate a warning on implicit string
                      concatenation in sequences defined over several lines.
                      [current: no]

Typecheck:
  --ignore-on-opaque-inference=<y_or_n>
                      This flag controls whether pylint should warn about
                      no-member and similar checks whenever an opaque object
                      is returned when inferring. The inference can return
                      multiple potential results while evaluating a Python
                      object, but some branches might not be evaluated,
                      which results in partial inference. In that case, it
                      might be useful to still emit no-member and other
                      checks for the rest of the inferred objects. [current:
                      yes]
  --ignore-mixin-members=<y_or_n>
                      Tells whether missing members accessed in mixin class
                      should be ignored. A mixin class is detected if its
                      name ends with "mixin" (case insensitive). [current:
                      yes]
  --ignore-none=<y_or_n>
                      Tells whether to warn about missing members when the
                      owner of the attribute is inferred to be None.
                      [current: yes]
  --ignored-modules=<module names>
                      List of module names for which member attributes
                      should not be checked (useful for modules/projects
                      where namespaces are manipulated during runtime and
                      thus existing member attributes cannot be deduced by
                      static analysis. It supports qualified module names,
                      as well as Unix pattern matching. [current: none]
  --ignored-classes=<members names>
                      List of class names for which member attributes should
                      not be checked (useful for classes with dynamically
                      set attributes). This supports the use of qualified
                      names. [current:
                      optparse.Values,thread._local,_thread._local]
  --generated-members=<members names>
                      List of members which are set dynamically and missed
                      by pylint inference system, and so shouldn't trigger
                      E1101 when accessed. Python regular expressions are
                      accepted. [current: none]
  --contextmanager-decorators=<decorator names>
                      List of decorators that produce context managers, such
                      as contextlib.contextmanager. Add to this list to
                      register other decorators that produce valid context
                      managers. [current: contextlib.contextmanager]
  --missing-member-hint-distance=<member hint edit distance>
                      The minimum edit distance a name should have in order
                      to be considered a similar match for a missing member
                      name. [current: 1]
  --missing-member-max-choices=<member hint max choices>
                      The total number of similar names that should be taken
                      in consideration when showing a hint for a missing
                      member. [current: 1]
  --missing-member-hint=<missing member hint>
                      Show a hint with possible names when a member name was
                      not found. The aspect of finding the hint is based on
                      edit distance. [current: yes]

Variables:
  --init-import=<y_or_n>
                      是否检查 __init__.py 中无用的 import
  --dummy-variables-rgx=<regexp>
                      符合正则表达式的变量不应该被使用
  --additional-builtins=<comma separated list>
                      额外的 builtin 变量名，默认 none
  --callbacks=<callbacks>
                      回调函数的名字前缀或后缀，默认 cb_,_cb
  --redefining-builtins-modules=<comma separated list>
                      列出的模块可以重新定义 builtins，默认 six.moves,past.builtins,future.builtins,builtins,io
  --ignored-argument-names=<regexp>
                      忽略符合正则表达式的名字，默认 _.*|^ignored_|^unused_
  --allow-global-unused-variables=<y_or_n>
                      允许出现没有用过的全局变量，默认 yes

Environment variables:
    The following environment variables are used:     * PYLINTHOME
  Path to the directory where persistent data for the run will be
  stored. If not found, it defaults to ~/.pylint.d/ or .pylint.d (in the
  current working directory).     * PYLINTRC     Path to the
  configuration file. See the documentation for the method used to
  search for configuration file.

Output:
  Using the default text output, the message format is :
  MESSAGE_TYPE: LINE_NUM:[OBJECT:] MESSAGE
  There are 5 kind of message types :
  * (C) convention, for programming standard violation
  * (R) refactor, for bad code smell
  * (W) warning, for python specific problems
  * (E) error, for probable bugs in the code
  * (F) fatal, if an error occurred which prevented pylint from doing
  further processing.

Output status code:
  Pylint should leave with following status code:
  * 0 if everything went fine
  * 1 if a fatal message was issued
  * 2 if an error message was issued
  * 4 if a warning message was issued
  * 8 if a refactor message was issued
  * 16 if a convention message was issued
  * 32 on usage error
  status 1 to 16 will be bit-ORed so you can know which different
  categories has been issued by analysing pylint output status code
